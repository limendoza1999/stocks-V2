import osimport requestsfrom dotenv import load_dotenvimport yfinance as yfimport numpy as npimport pandas as pdfrom datetime import datetime, timedeltaload_dotenv()def get_stock_data(ticker):        end = datetime.today()    start = end - timedelta(days=365)    try:        data = yf.download(ticker, start=start, end=end)        # Check if empty        if data.empty:            raise ValueError(f"No data found for ticker '{ticker}'. Please try a different symbol.")        return data    except Exception as e:        print(f"[ERROR] Failed to retrieve data for {ticker}: {e}")        return None        def get_options_chain(ticker, expiration_date):    """    Fetches both call and put options chain from Polygon.io for the given ticker and expiration.    """    api_key = os.getenv("POLYGON_API_KEY")    url = f"https://api.polygon.io/v3/snapshot/options/{ticker.upper()}?apiKey={api_key}"    try:        response = requests.get(url)        response.raise_for_status()        data = response.json()        # Filter to selected expiration        options = data.get("results", [])        filtered = [opt for opt in options if opt["details"]["expiration_date"] == expiration_date.strftime("%Y-%m-%d")]        # Create DataFrame        rows = []        for opt in filtered:            details = opt["details"]            greeks = opt.get("greeks", {})            market = opt.get("market", {})            rows.append({                "Type": details["option_type"],                "Strike": details["strike_price"],                "Expiration": details["expiration_date"],                "Bid": market.get("bid", None),                "Ask": market.get("ask", None),                "Last Price": market.get("last_quote", {}).get("p", None),                "Volume": market.get("volume", None),                "Open Interest": market.get("open_interest", None),                "Delta": greeks.get("delta", None),                "IV": greeks.get("iv", None),            })        df = pd.DataFrame(rows).sort_values(by="Strike")        return df    except Exception as e:        print(f"[ERROR] Polygon options fetch failed: {e}")        return pd.DataFrame()def simulate_future_prices(last_price, target_date):    days = (target_date - datetime.today().date()).days    simulated = [last_price]    for _ in range(days):        change = np.random.normal(loc=0, scale=2)        simulated.append(simulated[-1] * (1 + change / 100))    future_dates = pd.date_range(datetime.today(), periods=days+1).tolist()    return pd.Series(simulated, index=future_dates)