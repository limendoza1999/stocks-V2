import streamlit as stimport pandas as pdimport plotly.graph_objects as gofrom utils.data import get_stock_data, simulate_future_prices, get_options_chainfrom utils.ai import explain_trade# --- PAGE SETUP ---st.set_page_config(page_title="Options Insight", layout="wide")st.title("Options Insight: AI-Powered Call/Put Simulator")# --- SIDEBAR: USER INPUT ---st.sidebar.header("Choose Your Trade")ticker = st.sidebar.text_input("Stock Ticker", value="AAPL").upper()option_type = st.sidebar.selectbox("Option Type", ["Call", "Put"])strike_price = st.sidebar.number_input("Strike Price ($)", value=200.0, step=1.0)expiry_date = st.sidebar.date_input("Expiration Date")# --- FETCH STOCK DATA ---try:    data = get_stock_data(ticker)    if data is None or data.empty:        st.warning("No data found for that stock. Please check the symbol and try again.")        st.stop()        # Handle MultiIndex columns - flatten them    if isinstance(data.columns, pd.MultiIndex):        # Flatten MultiIndex columns - take the first level (Close, High, etc.)        data.columns = data.columns.get_level_values(0)        # Now we can safely access data['Close'] as a Series    if 'Close' not in data.columns:        st.error("Stock data is missing required 'Close' price column.")        st.stop()        current_price = round(data['Close'].iloc[-1], 2)    except Exception as e:    st.error(f"Error fetching stock data: {str(e)}")    st.stop()# --- SIMULATE FUTURE PRICES ---try:    simulated = simulate_future_prices(current_price, expiry_date)    if simulated is None or (hasattr(simulated, 'empty') and simulated.empty):        st.warning("Could not generate simulated prices.")        simulated = pd.Series(dtype=float)except Exception as e:    st.error(f"Error simulating future prices: {str(e)}")    simulated = pd.Series(dtype=float)# --- DISPLAY CURRENT PRICE ---st.markdown(f"**Current {ticker} Price:** ${current_price}")# --- MAIN: PRICE CHARTS ---st.subheader(f"Historical & Simulated Price: {ticker}")col1, col2 = st.columns(2)# ----- LEFT CHART: HISTORICAL -----with col1:    st.write("Last 12 Months")        try:        fig1 = go.Figure()        fig1.add_trace(go.Scatter(            x=data.index,            y=data['Close'],  # Now this works as a Series            mode="lines",            name="Historical Close Price",            line=dict(color="royalblue", width=2)        ))                fig1.update_layout(            title=f"{ticker} - Historical Prices",            xaxis_title="Date",            yaxis_title="Price ($)",            template="plotly_white",            height=400,            margin=dict(l=50, r=50, t=60, b=50),            showlegend=True,            hovermode='x unified'        )                fig1.update_traces(            hovertemplate="<b>Historical Price</b><br>" +                         "Date: %{x}<br>" +                         "Price: $%{y:.2f}<br>" +                         "<extra></extra>"        )                st.plotly_chart(fig1, use_container_width=True)            except Exception as e:        st.error(f"Error creating historical chart: {str(e)}")# ----- RIGHT CHART: SIMULATED -----with col2:    st.write("Next 30 Days (Simulated)")        try:        if not simulated.empty and len(simulated) > 0:            fig2 = go.Figure()            fig2.add_trace(go.Scatter(                x=simulated.index,                y=simulated.values,                mode="lines",                name="Simulated Future Price",                line=dict(color="seagreen", width=2)            ))                        # Add current price as starting point            fig2.add_trace(go.Scatter(                x=[simulated.index[0]],                y=[current_price],                mode="markers",                name="Current Price",                marker=dict(color="red", size=8),                showlegend=True            ))                        fig2.update_layout(                title=f"{ticker} - Simulated Future Prices",                xaxis_title="Future Date",                yaxis_title="Simulated Price ($)",                template="plotly_white",                height=400,                margin=dict(l=50, r=50, t=60, b=50),                showlegend=True,                hovermode='x unified'            )                        fig2.update_traces(                hovertemplate="<b>%{fullData.name}</b><br>" +                             "Date: %{x}<br>" +                             "Price: $%{y:.2f}<br>" +                             "<extra></extra>"            )                        st.plotly_chart(fig2, use_container_width=True)        else:            st.warning("No simulated price data available to display.")                except Exception as e:        st.error(f"Error creating simulation chart: {str(e)}")# --- PRICE SUMMARY ---if not simulated.empty and len(simulated) > 0:    final_simulated_price = round(simulated.iloc[-1], 2)    price_change = round(final_simulated_price - current_price, 2)    price_change_pct = round((price_change / current_price) * 100, 2)        col_summary1, col_summary2, col_summary3 = st.columns(3)        with col_summary1:        st.metric("Current Price", f"${current_price}")        with col_summary2:        st.metric("Projected Price (30d)", f"${final_simulated_price}",                  delta=f"${price_change}")        with col_summary3:        st.metric("Projected Change", f"{price_change_pct}%")                # --- OPTIONS CHAIN TABLE ---st.subheader(f"Real Options Chain for {ticker} - Exp: {expiry_date.strftime('%Y-%m-%d')}")with st.spinner("Fetching real options data..."):    try:        chain = get_options_chain(ticker, expiry_date)        if chain.empty:            st.warning("No options chain found for this date.")        else:            st.dataframe(chain, use_container_width=True, hide_index=True)    except Exception as e:        st.error(f"Error loading options chain: {str(e)}")# --- AI EXPLANATION ---st.subheader("I-Powered Options Explanation")if st.button("Explain This Trade", type="primary"):    try:        with st.spinner("Analyzing trade..."):            ai_response = explain_trade(ticker, option_type, strike_price, current_price, expiry_date)                if ai_response:            st.success("Analysis Complete")            st.write(ai_response)        else:            st.warning("Could not generate trade analysis.")                except Exception as e:        st.error(f"Error generating AI explanation: {str(e)}")# --- FOOTER ---st.markdown("---")st.markdown("*This is a simulation tool for educational purposes only. Not financial advice.*")